#include "${PROGNAME}.skel.h"

#define ${PROGNAME}_has_rodata ${PROGNAME_HAS_RODATA}

#if ${PROGNAME}_has_rodata
int set_${PROGNAME}_rodata(struct bpf_object *o, struct ${PROGNAME}_bpf__rodata *data)
{
    struct bpf_map *m = bpf_object__find_map_by_name(o, "${ROMAP_NAME}.rodata");
    if (!m)
    {
        return 1;
    }
    return bpf_map__set_initial_value(m, data, bpf_map__value_size(m));
}
#else
int set_${PROGNAME}_rodata(struct bpf_object *o, const void* data)
{
    return 0;
}
#endif

int ${OPERATION}${PROGNAME}(struct config *conf, after_attach_fn_t cb, const void* rodata)
{
    int err;
    char buf[100];
    buf[sizeof(buf) - 1] = '\0';

    // Skeleton
    struct ${PROGNAME}_bpf *obj = NULL;
    obj = ${PROGNAME}_bpf__open();
    if (!obj)
    {
        log_err(conf, "fail: opening the eBPF skeleton\n");
        return 1;
    }

    // Set read-only data
    if (set_${PROGNAME}_rodata(obj->obj, rodata))
    {
        log_err(conf, "fail: setting read-only value\n");
        return 1;
    }

    err = ${PROGNAME}_bpf__load(obj);
    if (err)
    {
        libbpf_strerror(err, buf, sizeof(buf));
        log_err(conf, "fail: loading the eBPF skeleton: %s\n", buf);
        goto destroy_${PROGNAME};
    }

    DECLARE_LIBBPF_OPTS(bpf_tc_hook, hook, .ifindex = conf->ifindex, .attach_point = conf->attach_point);
    err = bpf_tc_hook_create(&hook);
    if (err)
    {
        // Moving on in case the hook file already exists
        // TODO ? make this behavior configurable from arguments
        if (err != -EEXIST)
        {
            libbpf_strerror(err, buf, sizeof(buf));
            log_err(conf, "fail: creating the qdisc: %s\n", buf);
            goto destroy_${PROGNAME};
        }
        log_out(conf, "done: hook already existing, using it\n");
    }

    // Attach the TC eBPF program to the qdisc
    int fd = bpf_program__fd(obj->progs.${PROGNAME});
    DECLARE_LIBBPF_OPTS(bpf_tc_opts, opts, .prog_fd = fd, .flags = BPF_TC_F_REPLACE);
    err = bpf_tc_attach(&hook, &opts);
    if (err)
    {
        libbpf_strerror(err, buf, sizeof(buf));
        log_err(conf, "fail: attaching the TC eBPF program: %s\n", buf);
        goto cleanup_${PROGNAME};
    }
    log_out(conf, "done: attaching the TC eBPF program\n");
    log_out(conf, "opts: handle: 0x%x\n", opts.handle);
    log_out(conf, "opts: priority: %d\n", opts.priority);
    log_out(conf, "opts: program ID: %d\n", opts.prog_id);

    err = cb(hook, opts);

    if (conf->cleanup_on_exit)
    {
        opts.prog_fd = opts.prog_id = 0;
        opts.flags = 0;
        err = bpf_tc_detach(&hook, &opts);
        if (err)
        {
            libbpf_strerror(err, buf, sizeof(buf));
            log_err(conf, "fail: detaching the TC eBPF program: %s\n", buf);
        }
        log_out(conf, "done: detaching the TC eBPF program\n");
    }

cleanup_${PROGNAME}:
    if (conf->cleanup_on_exit)
    {
        // Force the cleanup of the qdisc as well
        hook.attach_point |= BPF_TC_INGRESS;
        err = bpf_tc_hook_destroy(&hook);
        if (err)
        {
            libbpf_strerror(err, buf, sizeof(buf));
            log_err(conf, "fail: destroying the qdisc: %s\n", buf);
        }
        log_out(conf, "done: destroying the qdisc\n");
    }

destroy_${PROGNAME}:
    if (conf->cleanup_on_exit)
    {
        ${PROGNAME}_bpf__destroy(obj);
    }

    return err < 0 ? -err : err;
}
